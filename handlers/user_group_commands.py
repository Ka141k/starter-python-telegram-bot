import re
from typing import Any
from datetime import datetime, timedelta
from contextlib import suppress

from aiogram import Router, Bot, F
from aiogram.types import Message, ChatPermissions
from aiogram.filters import Command, CommandObject, and_f
from aiogram.utils.markdown import hblockquote
from aiogram.exceptions import TelegramBadRequest 

from config import OWNER_ID

from pymorphy2 import MorphAnalyzer


def parse_time(time_string: str | None) -> datetime | None:
    if not time_string:
        return None
    
    match_ = re.match(r'(\d+)([a-z])', time_string.lower().strip())
    current_datetime = datetime.now()

    if match_:
        value, unit = int(match_.group(1)), match_.group(2)

        match unit:
            case 'm': time_delta = timedelta(minutes=value)
            case 'h': time_delta = timedelta(hours=value)
            case 'd': time_delta = timedelta(days=value)
            case 'w': time_delta = timedelta(weeks=value)
            case _: return None
    else:
        return None
    
    new_datetime = current_datetime + time_delta

    return new_datetime


router = Router()
router.message.filter(F.chat.type == 'supergroup')

morph = MorphAnalyzer(lang='ru')
triggers = ['–±–ª—è', '—Ö—É–π', '–Ω–∞—Ö', '–∞—Ö—É–µ—Ç—å', '–∞—Ö—É–µ–ª', '–æ—Ö—É–µ—Ç—å', '–æ—Ö—É–µ–ª', '–±–ª—è—Ç—å', '–±–ª—è–¥—å', '—Å—É–∫–∞', '–ø–∏–¥–æ—Ä', '–ø–∏–¥—Ä', '–µ–±–∞—Ç—å', '–µ–±–∞–Ω', '–µ–±–ª–∞–Ω', '—É–±–ª—é–¥–æ–∫', '—Å–µ–≥—ç', '–∫—É—Ç–∞–∫', '—Å–µ–∫–º–∏–º', '—Å–µ–∫—Ç–µ', '—Å–µ–∫–º—ç–µ–º', '—Å–µ–≥–µ–ª–≥—ç–Ω', '—Å–µ–≥–µ–ª–¥–µ']


@router.message(Command('rules', prefix='/!'))
async def rules_group_cmd(message: Message) -> None:
    await message.answer(f'–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ {message.chat.title} –¥–ª—è –µ—ë —á–ª–µ–Ω–æ–≤ –∫–æ–ª—Ö–æ–∑–Ω–∏–∫–æ–≤:\nhttps://telegra.ph/Pravila-kolhoznikov-02-03\n\n{hblockquote("–ù–µ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏!")}')


@router.message(and_f(Command('mute', prefix='/!'), F.from_user.id == OWNER_ID))
async def mute_group_cmd(message: Message, bot: Bot, command: CommandObject | None=None) -> Any:
    await message.delete()

    reply = message.reply_to_message

    if not reply:
        return await message.answer('üëÄ –ß–ª–µ–Ω –∫–æ–ª—Ö–æ–∑–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    
    until_date = parse_time(command.args)
    mention = reply.from_user.mention_html(reply.from_user.first_name)

    with suppress(TelegramBadRequest):
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=reply.from_user.id,
            until_date=until_date,
            permissions=ChatPermissions(
                can_send_messages=False,
                can_send_audios=False,
                can_send_documents=False,
                can_send_photos=False,
                can_send_videos=False,
                can_send_video_notes=False,
                can_send_voice_notes=False,
                can_send_polls=False,
                can_send_other_messages=False,
            ),
        )
        await message.answer(f'ü§Ø –ß–ª–µ–Ω–∞ –∫–æ–ª—Ö–æ–∑–Ω–∏–∫–æ–≤ <b>{mention}</b> –ª–∏—à–∏–ª–∏ <b>–°–≤–æ–±–æ–¥—ã –°–ª–æ–≤–∞</b> –Ω–∞ {command.args}!')


@router.message(and_f(Command('ban', prefix='/!'), F.from_user.id == OWNER_ID))
async def ban_group_cmd(message: Message, bot: Bot, command: CommandObject | None=None) -> Any:
    await message.delete()

    reply = message.reply_to_message

    if not reply:
        return await message.answer('üëÄ –ß–ª–µ–Ω –∫–æ–ª—Ö–æ–∑–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    
    until_date = parse_time(command.args)
    mention = reply.from_user.mention_html(reply.from_user.first_name)

    with suppress(TelegramBadRequest):
        await bot.ban_chat_member(
            chat_id=message.chat.id, user_id=reply.from_user.id, until_date=until_date
        )
        await message.answer(f'üò± –ß–ª–µ–Ω–∞ –∫–æ–ª—Ö–æ–∑–Ω–∏–∫–æ–≤ <b>{mention}</b> –∑–∞<b>–±–∞–Ω</b>–∏–ª–∏!')


@router.message(and_f(Command('mute', prefix='/!'), F.from_user.id != OWNER_ID))
async def mute_group_not_cmd(message: Message, bot: Bot, command: CommandObject | None=None) -> Any:
    await message.delete()

    await message.answer(f'{message.from_user.mention_html(message.chat.first_name)}, –û–±—ã—á–Ω—ã–π —Å–º–µ—Ä—Ç–Ω—ã–π —á–ª–µ–Ω –∫–æ–ª—Ö–æ–∑–Ω–∏–∫–æ–≤ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!')


@router.message(and_f(Command('ban', prefix='/!'), F.from_user.id != OWNER_ID))
async def ban_group_not_cmd(message: Message, bot: Bot, command: CommandObject | None=None) -> Any:
    await message.delete()

    await message.answer(f'{message.from_user.mention_html(message.chat.first_name)}, –û–±—ã—á–Ω—ã–π —Å–º–µ—Ä—Ç–Ω—ã–π —á–ª–µ–Ω –∫–æ–ª—Ö–æ–∑–Ω–∏–∫–æ–≤ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!')


@router.message(F.text)
async def profinity_filter(message: Message) -> None:
    for word in message.text.lower().strip().split():
        parsed_word = morph.parse(word)[0]
        normal_form = parsed_word.normal_form

        for trigger in triggers:
            if trigger in normal_form:
                await message.delete()
                return await message.answer(f'{message.from_user.mention_html(message.from_user.first_name)}, –Ω–µ —Ä—É–≥–∞–π—Å—è!')